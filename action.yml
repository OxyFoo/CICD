name: OxyFoo Deploy
description: "CI/CD module for upload and run."
author: "OxyFoo"

inputs:
  author:
    description: "Author of the project (lowercase)"
    required: true
  project-name:
    description: "Name of the project (lowercase)"
    required: true
  environment:
    description: "Environment to deploy (Development, Staging, Production)"
    required: true
  docker-compose-file:
    description: "Docker compose file (default: docker-compose.yml)"
    required: false
  docker-requires:
    description: "Docker requires before run (default: docker.service)"
    required: false

runs:
  using: composite
  env:
    REMOTE_USER: ${{ variables.VPS2_USER }}
    REMOTE_HOST: ${{ variables.VPS2_HOST }}
    PROJECT_PATH: "/srv/OxyCloud/Projects/${{ inputs.environment }}/${{ inputs.project-name }}"
    SERVICE_NAME: ${{ inputs.author }}-${{ inputs.project-name }}-${{ inputs.environment }}.service
    SERVICE_FILE: "/srv/OxyCloud/Services/$SERVICE_NAME"
    DOCKER_COMPOSE_FILE: ${{ inputs.docker-compose-file || 'docker-compose.yml' }}
    DOCKER_REQUIRES: ${{ inputs.docker-requires || 'docker.service' }}
  steps:
    - name: Setup SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.VPS2_SSH_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $REMOTE_HOST >> ~/.ssh/known_hosts

    - name: Check docker-compose file on server
      run: |
        ssh $REMOTE_USER@$REMOTE_HOST "
          if [ ! -f $PROJECT_PATH/$DOCKER_COMPOSE_FILE ]; then
            echo 'Docker compose file not found on server: $PROJECT_PATH/$DOCKER_COMPOSE_FILE'
            exit 1
          fi
        "

    - name: Stop service if exists
      run: |
        ssh $REMOTE_USER@$REMOTE_HOST "
          if systemctl list-units --full -all | grep -Fq $SERVICE_NAME; then
            sudo systemctl stop $SERVICE_NAME || true
          else
            echo 'Service does not exist, skipping stop.'
          fi
        "

    - name: Upload project to server
      run: |
        rsync -ravz --delete --exclude='.git' --exclude='.github' --exclude='node_modules' $GITHUB_WORKSPACE/ $REMOTE_USER@$REMOTE_HOST:$PROJECT_PATH

    - name: Create and start systemd service
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        PROJECT: ${{ inputs.project-name }}
      run: |
        ssh $REMOTE_USER@$REMOTE_HOST "
          sudo bash -c 'cat > $SERVICE_FILE' <<EOL
[Unit]
Description=$REMOTE_USER - $ENVIRONMENT - $PROJECT
Requires=$DOCKER_REQUIRES
After=$DOCKER_REQUIRES

[Service]
Type=oneshot
RemainAfterExit=yes
User=$REMOTE_USER
WorkingDirectory=$PROJECT_PATH
ExecStart=/usr/bin/docker compose -f $DOCKER_COMPOSE_FILE up -d --build
ExecStop=/usr/bin/docker compose -f $DOCKER_COMPOSE_FILE down

[Install]
WantedBy=multi-user.target
EOL

          sudo systemctl daemon-reload
          sudo systemctl enable $SERVICE_NAME
        "

    - name: Update services and run project
      run: |
        ssh $REMOTE_USER@$REMOTE_HOST "
          sudo oxy -u
          sudo systemctl start $SERVICE_NAME
        "

    - name: Clean up
      run: |
        rm -rf ~/.ssh
        ssh-keygen -R $REMOTE_HOST || true
