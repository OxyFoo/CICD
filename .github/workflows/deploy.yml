name: OxyFoo Deploy

permissions:
  contents: read
  actions: write
  packages: write

on:
  workflow_call:
    inputs:
      author:
        description: "Author of the project (lowercase)"
        required: true
        type: string
      environment:
        description: "Environment to deploy (Development, Staging, Production)"
        required: true
        type: string
      artifact-name:
        description: "Artifact name to download"
        required: false
        type: string
      docker-compose-file:
        description: "Docker compose file (default: docker-compose.yml)"
        required: false
        type: string
      docker-requires:
        description: "Docker requires before run (default: docker.service)"
        required: false
        type: string
    secrets:
      VPS2_SSH_PRIVATE_KEY:
        description: "SSH private key for server"
        required: true
      VPS2_USER:
        description: "User for server"
        required: true
      VPS2_HOST:
        description: "Host for server"
        required: true

env:
  PROJECT_NAME: ${{ github.event.repository.name }}
  ENVIRONMENT_MIN: ${{ inputs.environment == 'Production' && 'prod' || inputs.environment == 'Staging' && 'stag' || 'dev' }}
  PROJECT_PATH: "/srv/OxyCloud/Projects/${{ inputs.environment }}"
  SERVICE_PATH: "/srv/OxyCloud/Services"
  DOCKER_COMPOSE_FILE: ${{ inputs.docker-compose-file || 'docker-compose.yml' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Define environment variables
        run: |
          echo "PROJECT_NAME_MIN=$(echo '${{ inputs.author }}-${{ env.PROJECT_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "SERVICE_NAME=$(echo '${{ inputs.author }}-${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT_MIN }}.service' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "PROJECT_BACKUP=$(echo '${{ inputs.author }}-${{ env.PROJECT_NAME }}.bak' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Temporary backup of project
        run: |
          ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
            if [ -d ${{ env.PROJECT_PATH }}/$PROJECT_NAME_MIN ]; then
              sudo mv ${{ env.PROJECT_PATH }}/$PROJECT_NAME_MIN ${{ env.PROJECT_PATH }}/$PROJECT_BACKUP
            fi
          "

      - name: Download Configuration Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name || 'project-package' }}
          path: .

      - name: Debug Config Files
        run: |
          echo "Contents of downloaded config:"
          ls -lash

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS2_HOST }} >> ~/.ssh/known_hosts

      - name: Check docker-compose file locally
        run: |
          echo "Checking docker-compose file: ${{ env.DOCKER_COMPOSE_FILE }}"
          if [ ! -f "./${{ env.DOCKER_COMPOSE_FILE }}" ]; then
            echo "Docker compose file not found locally"
            exit 1
          fi

      - name: Stop service if exists
        run: |
          ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
            if systemctl list-units --full -all | grep -Fq ${SERVICE_NAME}; then
              sudo systemctl stop ${SERVICE_NAME} || true
            else
              echo 'Service does not exist, skipping stop.'
            fi
          "

      - name: Upload project to server
        run: |
          rsync -ravz --no-perms --no-owner --no-group --delete \
            --exclude='.git' --exclude='.github' --exclude='node_modules' ./ \
            ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }}:${{ env.PROJECT_PATH }}/$PROJECT_NAME_MIN

      - name: Create and start systemd service
        env:
          SYSTEMD_SERVICE: |
            [Unit]
            Description=${{ inputs.author }} - ${{ inputs.environment }} - ${{ env.PROJECT_NAME }}
            Requires=${{ inputs.docker-requires || 'docker.service' }}
            After=${{ inputs.docker-requires || 'docker.service' }}

            [Service]
            Type=oneshot
            RemainAfterExit=yes
            User=${{ secrets.VPS2_USER }}
            WorkingDirectory=${{ env.PROJECT_PATH }}/PROJECT_NAME_MIN
            ExecStart=/usr/bin/docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d --build
            ExecStop=/usr/bin/docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down

            [Install]
            WantedBy=multi-user.target
        run: |
          # Replace placeholders in systemd service
          SYSTEMD_SERVICE=$(echo "$SYSTEMD_SERVICE" | sed "s/PROJECT_NAME_MIN/$PROJECT_NAME_MIN/g")

          # Send systemd service to server
          ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
            printf \"$SYSTEMD_SERVICE\" > ${{ env.SERVICE_PATH }}/${SERVICE_NAME}
          "

      - name: Update services and run project
        run: |
          ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
            sudo oxy -u
            sudo systemctl start ${SERVICE_NAME}
          "

      - name: Cleanup remote backup
        run: |
          ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
            if [ -d ${{ env.PROJECT_PATH }}/$PROJECT_BACKUP ]; then
              sudo rm -rf ${{ env.PROJECT_PATH }}/$PROJECT_BACKUP
            fi
          "

      - name: Cleanup local files
        run: |
          rm -rf ./*

      - name: Restore project if failed
        if: failure()
        run: |
          ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
            if [ -d ${{ env.PROJECT_PATH }}/$PROJECT_BACKUP ]; then
              # Remove failed project
              sudo rm -rf ${{ env.PROJECT_PATH }}/$PROJECT_NAME_MIN

              # Restore backup
              sudo mv ${{ env.PROJECT_PATH }}/$PROJECT_BACKUP ${{ env.PROJECT_PATH }}/$PROJECT_NAME_MIN

              # Start service if exists
              if systemctl list-units --full -all | grep -Fq ${SERVICE_NAME}; then
                sudo systemctl start ${SERVICE_NAME}
              fi

              # Notify
              echo 'Project restored from backup.'
            fi
          "
