name: OxyFoo Deploy

permissions:
  contents: read
  actions: write
  packages: write

on:
  workflow_call:
    inputs:
      author:
        description: "Author of the project (lowercase)"
        required: true
        type: string
      environment:
        description: |
          Environment to deploy:
          - `Development` - with docker compose
          - `Staging` - with docker compose
          - `Production` - with docker compose
          - `WebStatic` - directly upload to web server
          - `Temporary` - deleted after run
        required: true
        type: string
      artifact-name:
        description: "Artifact name to download"
        required: false
        type: string
      web-static-domain:
        description: "Web static domain"
        required: false
        type: string
      web-static-path:
        description: "Web static path"
        required: false
        type: string
      docker-compose-file:
        description: "Docker compose file (default: docker-compose.yml)"
        required: false
        type: string
      docker-requires:
        description: "Docker requires before run (default: docker.service)"
        required: false
        type: string
      exclude-folders:
        description: "Folders to exclude during upload (default: .git,.github,node_modules). Use \"\" to disable all excludes."
        required: false
        type: string
        default: ".git,.github,node_modules"
      run-on-success:
        description: "Remote command to run on success, after deployment (all quotes and environment variables needed to be escaped)"
        required: false
        type: string
      run-on-failure:
        description: "Remote command to run on failure, after deployment (all quotes and environment variables needed to be escaped)"
        required: false
        type: string
      run-on-setup:
        description: "Remote command to run after setup and before deployment (all quotes and environment variables needed to be escaped)"
        required: false
        type: string
    secrets:
      VPS2_SSH_PRIVATE_KEY:
        description: "SSH private key for server"
        required: true
      VPS2_USER:
        description: "User for server"
        required: true
      VPS2_HOST:
        description: "Host for server"
        required: true

env:
  PROJECT_NAME: ${{ github.event.repository.name }}
  PROJECT_PATH: "/srv/OxyCloud/Projects/${{ inputs.environment }}"
  PROJECT_TYPE: ${{ inputs.environment == 'WebStatic' && 'web-static' || inputs.environment == 'Temporary' && 'temporary' || 'docker' }}
  ENVIRONMENT_MIN: ${{ inputs.environment == 'Production' && 'prod' || inputs.environment == 'Staging' && 'stag' || 'dev' }}
  STATIC_WEB_PATH: "/srv/OxyCloud/WebServer/domains/${{ inputs.web-static-domain }}/public_html/${{ inputs.web-static-path }}"
  SERVICE_PATH: "/srv/OxyCloud/Services"
  DOCKER_COMPOSE_FILE: ${{ inputs.docker-compose-file || 'docker-compose.yml' }}
  TEMPORARY_PATH: "/srv/OxyCloud/Projects/Temporary/${{ github.run_id }}"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Define environment variables
        run: |
          echo "PROJECT_NAME_MIN=$(echo '${{ inputs.author }}-${{ env.PROJECT_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "PROJECT_FULL_NAME=$(echo '${{ inputs.author }}-${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT_MIN }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "SERVICE_NAME=$(echo '${{ inputs.author }}-${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT_MIN }}.service' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "PROJECT_BACKUP=$(echo '${{ inputs.author }}-${{ env.PROJECT_NAME }}.bak' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS2_HOST }} >> ~/.ssh/known_hosts

      - name: Temporary backup of project
        if: env.PROJECT_TYPE != 'temporary'
        run: |
          echo "Backing up project..."

          # Web static backup
          if [ "${{ env.PROJECT_TYPE }}" == "web-static" ]; then
            echo "Backup with static website is not supported, skipping backup."
            exit 0
          fi

          # Docker backup
          ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
            if [ -d ${{ env.PROJECT_PATH }}/$PROJECT_NAME_MIN ]; then
              mv ${{ env.PROJECT_PATH }}/$PROJECT_NAME_MIN ${{ env.PROJECT_PATH }}/$PROJECT_BACKUP
            fi
          "

      - name: Download Configuration Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name || 'project-package' }}
          path: .

      - name: Debug Config Files
        run: |
          echo "Contents of downloaded config:"
          ls -lash

      - name: Check docker-compose file locally
        if: env.PROJECT_TYPE == 'docker'
        run: |
          echo "Checking docker-compose file: ${{ env.DOCKER_COMPOSE_FILE }}"
          if [ ! -f "./${{ env.DOCKER_COMPOSE_FILE }}" ]; then
            echo "Docker compose file not found locally"
            exit 1
          fi

          echo "Checking container name"
          if ! grep -q 'container_name' "./${{ env.DOCKER_COMPOSE_FILE }}"; then
            echo "Container name not found in docker-compose file"
            exit 1
          fi

          CONTAINER_NAMES=$(grep 'container_name' "./${{ env.DOCKER_COMPOSE_FILE }}" | awk '{print $2}' | tr -d '"')
          echo "Container name: $CONTAINER_NAMES"
            if [ -z "$CONTAINER_NAMES" ] || [[ "$CONTAINER_NAMES" != *"$PROJECT_FULL_NAME"* ]]; then
            echo "Container name not defined or different of project name"
            echo "Please define container_name in docker-compose file as '$PROJECT_FULL_NAME'"
            exit 1
          fi

      - name: Stop service if exists
        if: env.PROJECT_TYPE == 'docker'
        run: |
          ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
            # Stop service if exists
            if systemctl list-units --full -all | grep -Fq ${SERVICE_NAME}; then
              sudo systemctl stop ${SERVICE_NAME} || true
              echo 'Service stopped.'
            else
              echo 'Service does not exist, skipping stop.'
            fi

            # Stop container if exists
            if docker ps --filter name=${PROJECT_FULL_NAME} --format '{{.Names}}' | grep -Fq ${PROJECT_FULL_NAME}; then
              docker stop ${PROJECT_FULL_NAME} || true
              echo 'Container stopped.'
            else
              echo 'Container does not exist, skipping stop.'
            fi
          "

      - name: Upload project to server
        if: env.PROJECT_TYPE == 'docker'
        run: |
          # Create project directory
          ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
            mkdir -p ${{ env.PROJECT_PATH }}/$PROJECT_NAME_MIN
          "

          # Generate exclude arguments
          EXCLUDE_ARGS=""
          if [ ! -z "${{ inputs.exclude-folders }}" ]; then
            EXCLUDE_ARGS=$(echo "${{ inputs.exclude-folders }}" | tr ',' '\n' | sed 's/^/--exclude=/' | tr '\n' ' ')
          fi

          # Upload project to server
          rsync -ravz --no-perms --no-owner --no-group --delete \
            $EXCLUDE_ARGS ./ \
            ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }}:${{ env.PROJECT_PATH }}/$PROJECT_NAME_MIN

      - name: Upload static website to server
        if: env.PROJECT_TYPE == 'web-static'
        run: |
          # Create static web directory
          ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
            mkdir -p ${{ env.STATIC_WEB_PATH }}
          "

          # Generate exclude arguments
          EXCLUDE_ARGS=""
          if [ ! -z "${{ inputs.exclude-folders }}" ]; then
            EXCLUDE_ARGS=$(echo "${{ inputs.exclude-folders }}" | tr ',' '\n' | sed 's/^/--exclude=/' | tr '\n' ' ')
          fi

          # Upload project to static web directory
          rsync -ravz --no-perms --no-owner --no-group --delete \
            $EXCLUDE_ARGS ./ \
            ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }}:${{ env.STATIC_WEB_PATH }}

      - name: Upload temporary project to server
        if: env.PROJECT_TYPE == 'temporary'
        run: |
          # Create temporary directory
          ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
            mkdir -p ${{ env.TEMPORARY_PATH }}
          "

          # Generate exclude arguments
          EXCLUDE_ARGS=""
          if [ ! -z "${{ inputs.exclude-folders }}" ]; then
            EXCLUDE_ARGS=$(echo "${{ inputs.exclude-folders }}" | tr ',' '\n' | sed 's/^/--exclude=/' | tr '\n' ' ')
          fi

          # Upload project to temporary directory
          rsync -ravz --no-perms --no-owner --no-group --delete \
            $EXCLUDE_ARGS ./ \
            ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }}:${{ env.TEMPORARY_PATH }}

      - name: Run before deployment
        if: inputs.run-on-setup
        run: |
          # Run before deployment - temporary project
          if [ "${{ env.PROJECT_TYPE }}" == "temporary" ]; then
            echo "Running before deployment command..."
            ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
              cd ${{ env.TEMPORARY_PATH }}
              ${{ inputs.run-on-setup }}
            "
          fi

          # Run before deployment - web static or docker project
          if [ "${{ env.PROJECT_TYPE }}" == "web-static" ] || [ "${{ env.PROJECT_TYPE }}" == "docker" ]; then
            echo "Running before deployment command..."
            ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
              cd ${{ env.PROJECT_PATH }}/$PROJECT_NAME_MIN
              ${{ inputs.run-on-setup }}
            "
          fi

      - name: Create systemd service
        if: env.PROJECT_TYPE == 'docker'
        env:
          SYSTEMD_SERVICE: |
            [Unit]
            Description=${{ inputs.author }} - ${{ inputs.environment }} - ${{ env.PROJECT_NAME }}
            Requires=${{ inputs.docker-requires || 'docker.service' }}
            After=${{ inputs.docker-requires || 'docker.service' }}

            [Service]
            Type=simple
            RemainAfterExit=yes
            User=${{ secrets.VPS2_USER }}
            WorkingDirectory=${{ env.PROJECT_PATH }}/PROJECT_NAME_MIN
            ExecStart=/usr/bin/docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} up --build
            ExecStop=/usr/bin/docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down

            [Install]
            WantedBy=multi-user.target
        run: |
          # Replace placeholders in systemd service
          SYSTEMD_SERVICE=$(echo "$SYSTEMD_SERVICE" | sed "s/PROJECT_NAME_MIN/$PROJECT_NAME_MIN/g")

          # Send systemd service to server
          ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
            printf \"$SYSTEMD_SERVICE\" > ${{ env.SERVICE_PATH }}/${SERVICE_NAME}
          "

      - name: Update services and run project
        if: env.PROJECT_TYPE == 'docker'
        run: |
          ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
            sudo oxy -u
            sudo systemctl start ${SERVICE_NAME}
          "

      - name: Check service status
        if: env.PROJECT_TYPE == 'docker'
        run: |
          ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
            # Wait for service to start
            sleep 10

            # Check if service is active
            if ! systemctl is-active --quiet ${SERVICE_NAME}; then
              echo 'Service failed to start, exiting.'
              exit 1
            fi

            # Check if container is running
            if ! docker ps --filter name=${PROJECT_FULL_NAME} --format '{{.Names}}' | grep -Fq ${PROJECT_FULL_NAME}; then
              echo 'Container failed to start, exiting.'
              exit 1
            fi
          "

      - name: Cleanup remote backup & .gitkeep
        if: env.PROJECT_TYPE == 'docker'
        run: |
          ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
            if [ -d ${{ env.PROJECT_PATH }}/$PROJECT_BACKUP ]; then
              rm -rf ${{ env.PROJECT_PATH }}/$PROJECT_BACKUP
            fi

            find ${{ env.PROJECT_PATH }}/$PROJECT_NAME_MIN -name '.gitkeep' -delete
          "

      - name: Cleanup temporary project
        if: env.PROJECT_TYPE == 'temporary'
        run: |
          ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
            rm -rf ${{ env.TEMPORARY_PATH }}
          "

      - name: Cleanup local files
        run: |
          rm -rf ./*

      - name: Restore project if failed
        if: failure() && env.PROJECT_TYPE == 'docker'
        run: |
          ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
            if [ -d ${{ env.PROJECT_PATH }}/$PROJECT_BACKUP ]; then
              # Remove failed project
              rm -rf ${{ env.PROJECT_PATH }}/$PROJECT_NAME_MIN

              # Restore backup
              mv ${{ env.PROJECT_PATH }}/$PROJECT_BACKUP ${{ env.PROJECT_PATH }}/$PROJECT_NAME_MIN

              # Update service
              sudo oxy -u
              sleep 5

              # Start service if exists
              if systemctl list-units --full -all | grep -Fq ${SERVICE_NAME}; then
                echo 'Starting service...'
                sudo systemctl restart ${SERVICE_NAME}

                if ! systemctl is-active --quiet ${SERVICE_NAME}; then
                  echo 'Service failed to start, exiting.'
                  exit 1
                else
                  echo 'Service started.'
                fi
              else
                echo 'Service does not exist, skipping start.'
              fi

              # Notify
              echo 'Project restored from backup.'
            fi
          "

      - name: Run on success
        if: success() && inputs.run-on-success
        run: |
          # Run on success - temporary project
          if [ "${{ env.PROJECT_TYPE }}" == "temporary" ]; then
            echo "Running on success command..."
            ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
              cd ${{ env.TEMPORARY_PATH }}
              ${{ inputs.run-on-success }}
            "
          fi

          # Run on success - web static or docker project
          if [ "${{ env.PROJECT_TYPE }}" == "web-static" ] || [ "${{ env.PROJECT_TYPE }}" == "docker" ]; then
            echo "Running on success command..."
            ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
              cd ${{ env.PROJECT_PATH }}/$PROJECT_NAME_MIN
              ${{ inputs.run-on-success }}
            "
          fi

      - name: Run on failure
        if: failure() && inputs.run-on-failure
        run: |
          # Run on failure - temporary project
          if [ "${{ env.PROJECT_TYPE }}" == "temporary" ]; then
            echo "Running on failure command..."
            ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
              cd ${{ env.TEMPORARY_PATH }}
              ${{ inputs.run-on-failure }}
            "
          fi

          # Run on failure - web static or docker project
          if [ "${{ env.PROJECT_TYPE }}" == "web-static" ] || [ "${{ env.PROJECT_TYPE }}" == "docker" ]; then
            echo "Running on failure command..."
            ssh ${{ secrets.VPS2_USER }}@${{ secrets.VPS2_HOST }} "
              cd ${{ env.PROJECT_PATH }}/$PROJECT_NAME_MIN
              ${{ inputs.run-on-failure }}
            "
          fi
