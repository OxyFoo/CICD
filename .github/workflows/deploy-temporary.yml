name: Deploy Temporary Files

permissions:
  contents: read
  actions: write
  packages: write

on:
  workflow_call:
    inputs:
      author:
        description: "Author of the project (lowercase)"
        required: true
        type: string
      artifact-name:
        description: "Artifact name to download (default: project-package)"
        required: false
        type: string
        default: "project-package"
      exclude-folders:
        description: "Folders to exclude during upload (default: .git,.github,node_modules)"
        required: false
        type: string
        default: ".git,.github,node_modules"
      run-on-test:
        description: "Remote command to run during test phase"
        required: false
        type: string
      skip-tests:
        description: "Skip the test phase"
        required: false
        type: boolean
        default: false
      skip-verification:
        description: "Skip the verification phase"
        required: false
        type: boolean
        default: false
      run-on-success:
        description: "Remote command to run on success"
        required: false
        type: string
      run-on-failure:
        description: "Remote command to run on failure"
        required: false
        type: string
    secrets:
      DEPLOY_SERVER_SSH_PRIVATE_KEY:
        description: "SSH private key for server"
        required: true
      DEPLOY_SERVER_USER:
        description: "User for server"
        required: true
      DEPLOY_SERVER_HOST:
        description: "Host for server"
        required: true
      DEPLOY_SERVER_PORT:
        description: "SSH port for server (default: 22)"
        required: false

env:
  PROJECT_NAME: ${{ github.event.repository.name }}
  TEMPORARY_PATH: "/srv/OxyCloud/Projects/Temporary/${{ github.run_id }}"

jobs:
  deploy:
    name: "ðŸš€ Deploy Files"
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SERVER_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Configure SSH port
          SSH_PORT="${{ secrets.DEPLOY_SERVER_PORT }}"
          if [ -z "$SSH_PORT" ]; then
            SSH_PORT="22"
          fi
          ssh-keyscan -H -p $SSH_PORT ${{ secrets.DEPLOY_SERVER_HOST }} >> ~/.ssh/known_hosts
          # Configure SSH client for custom port
          echo "Host ${{ secrets.DEPLOY_SERVER_HOST }}" >> ~/.ssh/config
          echo "  Port $SSH_PORT" >> ~/.ssh/config

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name }}
          path: .

      - name: Upload files to server
        run: |
          # Generate exclude arguments
          EXCLUDE_ARGS=""
          if [ ! -z "${{ inputs.exclude-folders }}" ]; then
            EXCLUDE_ARGS=$(echo "${{ inputs.exclude-folders }}" | tr ',' '\n' | sed 's/^/--exclude=/' | tr '\n' ' ')
          fi

          # Create temporary directory and upload
          ssh ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }} "mkdir -p ${{ env.TEMPORARY_PATH }}"
          rsync -ravz --no-perms --no-owner --no-group --delete \
            $EXCLUDE_ARGS ./ \
            ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }}:${{ env.TEMPORARY_PATH }}
          echo "Files uploaded to temporary directory"

  test:
    name: "ðŸ§ª Run Tests"
    runs-on: ubuntu-latest
    needs: [deploy]
    if: inputs.run-on-test && !inputs.skip-tests
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SERVER_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Configure SSH port
          SSH_PORT="${{ secrets.DEPLOY_SERVER_PORT }}"
          if [ -z "$SSH_PORT" ]; then
            SSH_PORT="22"
          fi
          ssh-keyscan -H -p $SSH_PORT ${{ secrets.DEPLOY_SERVER_HOST }} >> ~/.ssh/known_hosts
          # Configure SSH client for custom port
          echo "Host ${{ secrets.DEPLOY_SERVER_HOST }}" >> ~/.ssh/config
          echo "  Port $SSH_PORT" >> ~/.ssh/config

      - name: Run tests
        run: |
          echo "Running tests on temporary project..."
          ssh ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }} "
            set -e
            cd ${{ env.TEMPORARY_PATH }}
            ${{ inputs.run-on-test }}
          "

  verify:
    name: "âœ… Verify Deployment"
    runs-on: ubuntu-latest
    needs: [deploy, test]
    if: always() && needs.deploy.result == 'success' && (needs.test.result == 'success' || needs.test.result == 'skipped') && !inputs.skip-verification
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SERVER_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Configure SSH port
          SSH_PORT="${{ secrets.DEPLOY_SERVER_PORT }}"
          if [ -z "$SSH_PORT" ]; then
            SSH_PORT="22"
          fi
          ssh-keyscan -H -p $SSH_PORT ${{ secrets.DEPLOY_SERVER_HOST }} >> ~/.ssh/known_hosts
          # Configure SSH client for custom port
          echo "Host ${{ secrets.DEPLOY_SERVER_HOST }}" >> ~/.ssh/config
          echo "  Port $SSH_PORT" >> ~/.ssh/config

      - name: Verify temporary deployment
        run: |
          ssh ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }} "
            if [ -d ${{ env.TEMPORARY_PATH }} ]; then
              echo 'Temporary deployment verified - files exist at ${{ env.TEMPORARY_PATH }}'
              echo 'Files will be automatically cleaned up after the workflow completes'
            else
              echo 'Error: Temporary deployment directory not found'
              exit 1
            fi
          "

  cleanup:
    name: "ðŸ§¹ Cleanup & Finalize"
    runs-on: ubuntu-latest
    needs: [deploy, test, verify]
    if: always()
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SERVER_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          # Configure SSH port
          SSH_PORT="${{ secrets.DEPLOY_SERVER_PORT }}"
          if [ -z "$SSH_PORT" ]; then
            SSH_PORT="22"
          fi
          ssh-keyscan -H -p $SSH_PORT ${{ secrets.DEPLOY_SERVER_HOST }} >> ~/.ssh/known_hosts
          # Configure SSH client for custom port
          echo "Host ${{ secrets.DEPLOY_SERVER_HOST }}" >> ~/.ssh/config
          echo "  Port $SSH_PORT" >> ~/.ssh/config

      - name: Run success commands
        if: success() && inputs.run-on-success
        run: |
          echo "Running success commands..."
          ssh ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }} "
            cd ${{ env.TEMPORARY_PATH }}
            ${{ inputs.run-on-success }}
          "

      - name: Run failure commands
        if: failure() && inputs.run-on-failure
        run: |
          echo "Running failure commands..."
          ssh ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }} "
            cd ${{ env.TEMPORARY_PATH }}
            ${{ inputs.run-on-failure }}
          " || true

      - name: Cleanup temporary files
        run: |
          ssh ${{ secrets.DEPLOY_SERVER_USER }}@${{ secrets.DEPLOY_SERVER_HOST }} "
            rm -rf ${{ env.TEMPORARY_PATH }}
            echo 'Temporary files cleaned up'
          "

      - name: Cleanup local files
        run: |
          rm -rf ./*
